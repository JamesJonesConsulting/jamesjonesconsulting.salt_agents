---
- name: Gather facts from all servers
  ansible.builtin.setup:
  delegate_to: "{{ host }}"
  delegate_facts: true
  loop: "{{ groups[generate_hosts_group] }}"
  loop_control:
    loop_var: host
- name: Construct the state base list
  ansible.builtin.set_fact:
    top_base: "{{ (top_base | default({})) | ansible.builtin.combine({ host: (hostvars[host]['salt_states'] | default([])) }) }}"
  loop: "{{ groups[generate_hosts_group] }}"
  loop_control:
    loop_var: host
- debug:
    msg: "{{ top_base }}"  
- debug:
    msg: "{{ hostvars[host] }}"
  loop: "{{ groups[generate_hosts_group] }}"
  loop_control:
    loop_var: host
- name: Write out the top.sls
  ansible.builtin.copy:
    content: "{{ { 'base': top_base } | to_nice_yaml }}"
    dest: /opt/salt/top.sls
- name: Create or Update States
  ansible.builtin.include_tasks: state.yml
  vars:
    state:
      name: "{{ st.key }}"
      definition: "{{ { st.key: st.value } }}"
  loop: "{{ (states_init | default({})) | dict2items }}"
  loop_control:
    loop_var: st

# - name: Create the cockpit directory
#   ansible.builtin.file:
#     path: /opt/salt/cockpit
#     state: directory
# - name: Create cockpit init.sls file 
#   ansible.builtin.copy:
#     content: |
#       cockpit:
#         pkg:
#           - installed
#         service:
#           - name: cockpit.socket
#           - running
#           - enable: true
#         firewalld.present:
#           - name: public
#           - services:
#             - cockpit 
#     dest: /opt/salt/cockpit/init.sls
